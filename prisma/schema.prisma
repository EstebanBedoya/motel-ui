// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  employee
}

enum RoomStatus {
  available
  occupied
  maintenance
  cleaning
}

enum RateType {
  hourly
  overnight
}

enum RecordType {
  occupied
  maintenance
  cleaning
}

model User {
  id       Int      @id @default(autoincrement())
  record   Record[]
  email    String   @unique
  password String
  role     Role     @default(employee)
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Room {
  id               Int              @id @unique
  record           Record[]
  prices           Price[]
  name             String
  type             String
  status           RoomStatus       @default(available)
  aditionals       AdditionalRoom[]
  temporalRecordId Int?
  createAt         DateTime         @default(now())
  updateAt         DateTime         @updatedAt
}

model Price {
  id        Int       @id @default(autoincrement())
  room      Room      @relation(fields: [roomId], references: [id])
  roomId    Int
  rateType  RateType
  weekday   Float
  weekend   Float
  special   Float?
  startDate DateTime?
  endDate   DateTime?
  createAt  DateTime  @default(now())
  updateAt  DateTime  @updatedAt()
}

model Additionals {
  id       Int              @id @default(autoincrement())
  name     String
  price    Float
  rooms    AdditionalRoom[]
  createAt DateTime         @default(now())
  updateAt DateTime         @updatedAt
}

model AdditionalRoom {
  roomId       Int
  additionalId Int

  room       Room        @relation(fields: [roomId], references: [id])
  additional Additionals @relation(fields: [additionalId], references: [id])

  @@id([roomId, additionalId])
}

model Record {
  id                 Int        @id @default(autoincrement())
  roomId             Int
  room               Room       @relation(fields: [roomId], references: [id])
  userId             Int
  user               User       @relation(fields: [userId], references: [id])
  rateType           RateType?
  recordType         RecordType
  startTime          DateTime
  endTime            DateTime
  extensions         Int?
  aditionalIds       Int[]      @default([])
  total              Float?
  instructions       String?
  maintenanceManager String?
  phoneNumber        String?
  maintenanceValue   Float?
  maintenanceDetails String?
  createAt           DateTime   @default(now())
  updateAt           DateTime   @updatedAt
}
